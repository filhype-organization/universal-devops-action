name: Code Quality Checks
description: 'Run linting and code quality checks'

inputs:
  sql_lint_path:
    description: 'Path to SQL files for linting'
    required: false
    default: 'models'
  sql_lint_config:
    description: 'Path to SQLFluff config file'
    required: false
    default: '.sqlfluff'
  sql_lint_version:
    description: 'SQLFluff version'
    required: false
    default: '3.3.1'
  github_token:
    description: 'GitHub token for authentication'
    required: true

runs:
  using: composite
  steps:
    - name: MegaLinter
      uses: oxsecurity/megalinter@v7
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        # Configuration pour fonctionner sur toutes les branches
        VALIDATE_ALL_CODEBASE: false
        # Désactiver les linters problématiques
        DISABLE_LINTERS: COPYPASTE_JSCPD,SPELL_CSPELL,REPOSITORY_CHECKOV,REPOSITORY_GITLEAKS,REPOSITORY_TEKTON,KUBERNETES_KUBECONFORM,ANSIBLE_ANSIBLE_LINT,ARM_ARM_TTK,CLOUDFORMATION_CFN_LINT,TERRAFORM_TFLINT,TERRAFORM_TERRASCAN,TERRAFORM_TERRAFORM_PLAN
        # Configuration de sortie
        REPORT_OUTPUT_FOLDER: megalinter-reports
        # Éviter les erreurs sur les fichiers ignorés        FILTER_REGEX_EXCLUDE: '(\.git/|node_modules/|\.venv/|__pycache__/)'
        # Performance : analyser seulement les fichiers modifiés sur les PR
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch || 'main' }}
        # Configuration pour les PR et commits
        MEGALINTER_CONFIG: |
          SHOW_ELAPSED_TIME: true
          FILEIO_REPORTER: false
          UPDATED_SOURCES_REPORTER: false

    - name: Run SQL Lint
      if: hashFiles('**/*.sql')
      uses: yu-iskw/action-sqlfluff@v4
      with:
        github_token: ${{ inputs.github_token }}
        reporter: github-pr-review
        sqlfluff_version: ${{ inputs.sql_lint_version }}
        sqlfluff_command: "fix"
        config: "${{ github.workspace }}/${{ inputs.sql_lint_config }}"
        paths: "${{ github.workspace }}/${{ inputs.sql_lint_path }}"
