name: Angular Build
description: 'Build Angular projects with container support'

inputs:
  node_version:
    description: 'Node.js version to use'
    required: false
    default: '22'
  build_options:
    description: 'Additional build options'
    required: false
    default: ''
  build_platform:
    description: 'Target platform for container builds (arm64 or amd64)'
    required: false
    default: 'amd64'
  docker_username:
    description: 'Docker Hub username for pushing images'
    required: false
  docker_token:
    description: 'Docker Hub token for authentication'
    required: false
  docker_image_name:
    description: 'Docker image name with repository (e.g. username/repo)'
    required: true
  container_build:
    description: 'Whether to build and push container image'
    required: false
    default: 'false'
  tag:
    description: 'Override version tag (takes precedence over Git tags and commit SHA)'
    required: false

runs:
  using: composite
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: npm

    - name: Install dependencies
      shell: bash
      run: npm ci

    - name: Build Angular project
      shell: bash
      run: npm run build -- ${{ inputs.build_options }}

    - name: Prepare artifacts for Docker
      if: inputs.container_build == 'true'
      shell: bash
      run: |
        # Create target/artifact directory structure expected by Dockerfile
        mkdir -p target/artifact
        
        # Copy Angular build output to target/artifact
        # Angular typically builds to dist/ folder
        if [ -d "dist" ]; then
          cp -r dist/* target/artifact/
          echo "✅ Copied Angular build artifacts from dist/ to target/artifact/"
        else
          echo "❌ No dist/ folder found. Available directories:"
          ls -la
          exit 1
        fi

    - name: Set up QEMU
      if: inputs.container_build == 'true' && inputs.docker_username != ''
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      if: inputs.container_build == 'true' && inputs.docker_username != ''
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: inputs.container_build == 'true' && inputs.docker_username != ''
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_token }}

    - name: Get version
      if: inputs.container_build == 'true' && inputs.docker_username != ''
      shell: bash
      run: |
        # Check if tag input is provided
        if [ -n "${{ inputs.tag }}" ]; then
          VERSION="${{ inputs.tag }}"
        else
          # Check if we're on a tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Use short commit SHA
            VERSION=$(git rev-parse --short HEAD)
          fi

          # Add snapshot suffix if not on main branch
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [ "$BRANCH_NAME" != "main" ]; then
            VERSION="${VERSION}-snapshot"
          fi
        fi
        echo "version=${VERSION}" >> $GITHUB_ENV

    - name: Build and push Docker image
      if: inputs.container_build == 'true' && inputs.docker_username != ''
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        platforms: linux/${{ inputs.build_platform }}
        push: true
        tags: |
          ${{ inputs.docker_image_name }}:${{ env.version }}-${{ inputs.build_platform }}

    - name: Create and push multi-arch manifest
      if: inputs.container_build == 'true' && inputs.docker_username != '' && inputs.build_platform == 'amd64'
      shell: bash
      run: |
        # Wait a bit to ensure all platform builds are pushed
        sleep 10
        
        # Get all existing platforms for this version
        PLATFORMS=""
        if docker manifest inspect ${{ inputs.docker_image_name }}:${{ env.version }}-amd64 >/dev/null 2>&1; then
          PLATFORMS="$PLATFORMS ${{ inputs.docker_image_name }}:${{ env.version }}-amd64"
        fi
        if docker manifest inspect ${{ inputs.docker_image_name }}:${{ env.version }}-arm64 >/dev/null 2>&1; then
          PLATFORMS="$PLATFORMS ${{ inputs.docker_image_name }}:${{ env.version }}-arm64"
        fi
        
        if [ -n "$PLATFORMS" ]; then
          echo "Creating multi-arch manifest for platforms: $PLATFORMS"
          docker manifest create ${{ inputs.docker_image_name }}:${{ env.version }} $PLATFORMS
          docker manifest push ${{ inputs.docker_image_name }}:${{ env.version }}
          
          # Also create latest tag manifest if on main branch
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [ "$BRANCH_NAME" = "main" ] && [[ ! "${{ env.version }}" =~ "-snapshot" ]]; then
            docker manifest create ${{ inputs.docker_image_name }}:latest $PLATFORMS
            docker manifest push ${{ inputs.docker_image_name }}:latest
          fi
        else
          echo "No platform images found, skipping manifest creation"
        fi
