name: Reusable workflow

on:
  workflow_call:
    inputs:
      build_options:
        description: 'Additional options build commands'
        required: false
        type: string
        default: ''
      test_options:
        description: 'Additional options test commands'
        required: false
        type: string
        default: ''
      java_version:
        description: 'Java version'
        required: false
        type: string
        default: '21'
      node_version:
        description: 'Node.js version'
        required: false
        type: string
        default: '22'
      build_type:
        description: 'Build type for Java projects (legacy or native)'
        required: false
        type: string
        default: 'legacy'
      build_platform:
        description: 'Target platform for container builds (arm64 or x86)'
        required: false
        type: string
      container_build:
        description: 'Whether to build and push container image for Angular'
        required: false
        type: boolean
        default: false
      sql_lint_path:
        description: 'Path to SQL files for linting'
        required: false
        type: string
        default: 'models'
      sql_lint_config:
        description: 'Path to SQLFluff config file'
        required: false
        type: string
        default: '.sqlfluff'
      trufflehog_args:
        description: 'Additional arguments for TruffleHog'
        required: false
        type: string
        default: '--results=verified,unknown'
      docker_image_name:
        description: 'Docker image name (required for container builds)'
        required: false
        type: string
      enable_java_build:
        description: 'Enable Java build job'
        required: false
        type: boolean
        default: true
      enable_angular_build:
        description: 'Enable Angular build job'
        required: false
        type: boolean
        default: true
      run_tests:
        description: 'Whether to run tests before building (Angular)'
        required: false
        type: boolean
        default: true
      enable_mkdocs_build:
        description: 'Enable MkDocs build and deploy job'
        required: false
        type: boolean
        default: true
      python_version:
        description: 'Python version for MkDocs'
        required: false
        type: string
        default: '3.x'
      mkdocs_requirements:
        description: 'MkDocs requirements (space-separated packages)'
        required: false
        type: string
        default: 'mkdocs-material'
    secrets:
      GH_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      DOCKER_USERNAME:
        required: false
      DOCKER_TOKEN:
        required: false

jobs:
  get-context:
    runs-on: ubuntu-latest
    outputs:
      java: ${{ steps.project-type.outputs.java }}
      pom: ${{ steps.project-type.outputs.pom }}
      gradle: ${{ steps.project-type.outputs.gradle }}
      angular: ${{ steps.project-type.outputs.angular }}
      spring: ${{ steps.project-type.outputs.spring }}
      quarkus: ${{ steps.project-type.outputs.quarkus }}
      mkdocs: ${{ steps.project-type.outputs.mkdocs }}
      outputs: ${{ steps.project-type.outputs.outputs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get Context
        id: project-type
        uses: filhype-organization/universal-devops-action/.github/actions/get-context@test
  
  test:
    runs-on: ubuntu-latest
    needs: [get-context]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Display Context
        shell: bash
        run: |
          echo "Java: ${{ needs.get-context.outputs.java }}"
          echo "Maven: ${{ needs.get-context.outputs.pom }}"
          echo "Gradle: ${{ needs.get-context.outputs.gradle }}"
          echo "Spring: ${{ needs.get-context.outputs.spring }}"
          echo "Quarkus: ${{ needs.get-context.outputs.quarkus }}"
          echo "Full outputs: ${{ needs.get-context.outputs.outputs }}"

      - name: Run Java Tests
        if: needs.get-context.outputs.java == 'true'
        uses: filhype-organization/universal-devops-action/.github/actions/test/java-test@test
        with:
          test_options: ${{ inputs.test_options }}
          java_version: ${{ inputs.java_version }}
          project_type: ${{ (needs.get-context.outputs.pom == 'true' && 'maven') || 'gradle' }}

  test-node:
    runs-on: trion/ng-cli-e2e:latest
    if: needs.get-context.outputs.angular == 'true'
    needs: [get-context]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Display Context
        shell: bash
        run: |
          echo "Angular: ${{ needs.get-context.outputs.angular }}"
          echo "Full outputs: ${{ needs.get-context.outputs.outputs }}"

      - name: Run Angular Tests
        uses: filhype-organization/universal-devops-action/.github/actions/test/angular-test@test
        with:
          test_options: ${{ inputs.test_options }}
          node_version: ${{ inputs.node_version }}

  java-build:
    runs-on: ubuntu-latest    
    needs: [test, get-context]
    if: needs.get-context.outputs.java == 'true' && inputs.enable_java_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Java Project
        uses: filhype-organization/universal-devops-action/.github/actions/build/java-build@test
        with:
          java_version: ${{ inputs.java_version }}
          build_options: ${{ inputs.build_options }}
          build_type: ${{ inputs.build_type }}
          build_platform: ${{ inputs.build_platform }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}
          docker_image_name: ${{ inputs.docker_image_name }}
          is_quarkus: ${{ needs.get-context.outputs.quarkus }}

  angular-build:
    runs-on: ubuntu-latest
    needs: [test, get-context]
    if: needs.get-context.outputs.angular == 'true' && inputs.enable_angular_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Angular Project
        uses: filhype-organization/universal-devops-action/.github/actions/build/angular-build@test
        with:
          node_version: ${{ inputs.node_version }}
          build_options: ${{ inputs.build_options }}
          run_tests: ${{ inputs.run_tests }}
          build_platform: ${{ inputs.build_platform }}
          container_build: ${{ inputs.container_build }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}
          docker_image_name: ${{ inputs.docker_image_name }}
          
  lint:
    runs-on: ubuntu-latest
    needs: [get-context, java-build, angular-build]
    if: always() && (needs.java-build.result == 'success' || needs.angular-build.result == 'success' || needs.java-build.result == 'skipped' || needs.angular-build.result == 'skipped')
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Linters
        uses: filhype-organization/universal-devops-action/.github/actions/lint@test
        with:
          sql_lint_path: ${{ inputs.sql_lint_path }}
          sql_lint_config: ${{ inputs.sql_lint_config }}
          github_token: ${{ secrets.GH_TOKEN }}
          
  security:
    runs-on: ubuntu-latest
    needs: [get-context, java-build, angular-build]
    if: always() && (needs.java-build.result == 'success' || needs.angular-build.result == 'success' || needs.java-build.result == 'skipped' || needs.angular-build.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run TruffleHog Secret Scanning
        uses: filhype-organization/universal-devops-action/.github/actions/security/trufflehog@test
        with:
          trufflehog_args: ${{ inputs.trufflehog_args }}
          
      - name: Run Trivy Vulnerability Scanning
        uses: filhype-organization/universal-devops-action/.github/actions/security/trivy@test
        with:
          severity: 'CRITICAL,HIGH'
          upload_sarif: 'true'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Security Scan Summary
        shell: bash
        run: |
          echo "üõ°Ô∏è Security scanning completed!"
          echo "‚úÖ TruffleHog secret detection: Done"
          echo "‚úÖ Trivy vulnerability analysis: Done"
          echo ""
          echo "üìä Check the following for results:"
          echo "  - GitHub Security tab for Trivy SARIF results"
          echo "  - Job logs for TruffleHog secret detection"          echo "  - Any failed steps indicate security issues to address"
  mkdocs-build:
    runs-on: ubuntu-latest
    needs: [get-context]
    if: needs.get-context.outputs.mkdocs == 'true' && inputs.enable_mkdocs_build == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Deploy MkDocs
        uses: filhype-organization/universal-devops-action/.github/actions/mkdocs-build@test
        with:
          python_version: ${{ inputs.python_version }}
          mkdocs_requirements: ${{ inputs.mkdocs_requirements }}
          deploy: 'true'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: MkDocs Build Summary
        shell: bash
        run: |
          echo "üìö MkDocs documentation build completed!"
          echo "üöÄ Documentation deployed to GitHub Pages"
          echo ""
          echo "üìñ Your documentation is available at:"
          echo "  https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

  analysis:
    runs-on: ubuntu-latest
    needs: [get-context]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Renovate Configuration
        uses: filhype-organization/universal-devops-action/.github/actions/analysis/renovate@test
        with:
          renovate_schedule: 'before 6am on monday'
          auto_merge_patch: 'true'
          auto_merge_dev_deps: 'true'



