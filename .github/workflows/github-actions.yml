name: Reusable workflow

on:
  workflow_call:
    inputs:
      build_options:
        description: 'Additional options build commands'
        required: false
        type: string
        default: ''
      test_options:
        description: 'Additional options test commands'
        required: false
        type: string
        default: ''
      java_version:
        description: 'Java version'
        required: false
        type: string
        default: '21'
      node_version:
        description: 'Node.js version'
        required: false
        type: string
        default: '22'
      build_type:
        description: 'Build type for Java projects (legacy or native)'
        required: false
        type: string
        default: 'legacy'
      build_platforms:
        description: 'Target platforms for builds (JSON array: ["amd64"], ["arm64"], or ["amd64", "arm64"])'
        required: false
        type: string
        default: '["amd64"]'
      container_build:
        description: 'Whether to build and push container image for Angular'
        required: false
        type: boolean
        default: false
      sql_lint_path:
        description: 'Path to SQL files for linting'
        required: false
        type: string
        default: 'models'
      sql_lint_config:
        description: 'Path to SQLFluff config file'
        required: false
        type: string
        default: '.sqlfluff'
      trufflehog_args:
        description: 'Additional arguments for TruffleHog'
        required: false
        type: string
        default: '--results=verified,unknown'
      docker_image_name:
        description: 'Docker image name (required for container builds)'
        required: false
        type: string
      tag:
        description: 'Override version tag for Docker images'
        required: false
        type: string
      enable_java_build:
        description: 'Enable Java build job'
        required: false
        type: boolean
        default: true
      enable_angular_build:
        description: 'Enable Angular build job'
        required: false
        type: boolean
        default: true
      run_tests:
        description: 'Whether to run tests before building (Angular)'
        required: false
        type: boolean
        default: true
      enable_mkdocs_build:
        description: 'Enable MkDocs build and deploy job'
        required: false
        type: boolean
        default: true
      python_version:
        description: 'Python version for MkDocs'
        required: false
        type: string
        default: '3.x'
      mkdocs_requirements:
        description: 'MkDocs requirements (space-separated packages)'
        required: false
        type: string
        default: 'mkdocs-material'
    secrets:
      GH_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      DOCKER_USERNAME:
        required: false
      DOCKER_TOKEN:
        required: false

jobs:
  get-context:
    runs-on: ubuntu-latest
    outputs:
      java: ${{ steps.project-type.outputs.java }}
      pom: ${{ steps.project-type.outputs.pom }}
      gradle: ${{ steps.project-type.outputs.gradle }}
      angular: ${{ steps.project-type.outputs.angular }}
      spring: ${{ steps.project-type.outputs.spring }}
      quarkus: ${{ steps.project-type.outputs.quarkus }}
      mkdocs: ${{ steps.project-type.outputs.mkdocs }}
      outputs: ${{ steps.project-type.outputs.outputs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get Context
        id: project-type
        uses: filhype-organization/universal-devops-action/.github/actions/get-context@multi-build
  
  test:
    runs-on: ubuntu-latest
    if: needs.get-context.outputs.java == 'true'
    needs: [get-context]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Display Context
        shell: bash
        run: |
          echo "Java: ${{ needs.get-context.outputs.java }}"
          echo "Maven: ${{ needs.get-context.outputs.pom }}"
          echo "Gradle: ${{ needs.get-context.outputs.gradle }}"
          echo "Spring: ${{ needs.get-context.outputs.spring }}"
          echo "Quarkus: ${{ needs.get-context.outputs.quarkus }}"
          echo "Full outputs: ${{ needs.get-context.outputs.outputs }}"

      - name: Run Java Tests
        if: needs.get-context.outputs.java == 'true'
        uses: filhype-organization/universal-devops-action/.github/actions/test/java-test@multi-build
        with:
          test_options: ${{ inputs.test_options }}
          java_version: ${{ inputs.java_version }}
          project_type: ${{ (needs.get-context.outputs.pom == 'true' && 'maven') || 'gradle' }}
  
  test-node:
    runs-on: ubuntu-latest
    container: 
      image: trion/ng-cli-e2e:latest
      options: --user root
    if: needs.get-context.outputs.angular == 'true'
    needs: [get-context]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Display Context
        shell: bash
        run: |
          echo "Angular: ${{ needs.get-context.outputs.angular }}"
          echo "Full outputs: ${{ needs.get-context.outputs.outputs }}"

      - name: Run Angular Tests
        uses: filhype-organization/universal-devops-action/.github/actions/test/angular-test@multi-build
        with:
          node_version: ${{ inputs.node_version }}
          test_options: ${{ inputs.test_options }}

  java-build:
    runs-on: ubuntu-latest    
    needs: [test, get-context]
    if: needs.get-context.outputs.java == 'true' && inputs.enable_java_build
    strategy:
      matrix:
        platform: ${{ fromJSON(inputs.build_platforms || '["amd64"]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Java Project
        id: build
        uses: filhype-organization/universal-devops-action/.github/actions/build/java-build@multi-build
        with:
          java_version: ${{ inputs.java_version }}
          build_options: ${{ inputs.build_options }}
          build_type: ${{ inputs.build_type }}
          build_platform: ${{ matrix.platform }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}
          docker_image_name: ${{ inputs.docker_image_name }}
          is_quarkus: ${{ needs.get-context.outputs.quarkus }}
          tag: ${{ inputs.tag }}

  angular-build:
    runs-on: ubuntu-latest
    needs: [test-node, get-context]
    if: needs.get-context.outputs.angular == 'true' && inputs.enable_angular_build
    strategy:
      matrix:
        platform: ${{ fromJSON(inputs.build_platforms || '["amd64"]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Angular Project
        id: build
        uses: filhype-organization/universal-devops-action/.github/actions/build/angular-build@multi-build
        with:
          node_version: ${{ inputs.node_version }}
          build_options: ${{ inputs.build_options }}
          build_platform: ${{ matrix.platform }}
          container_build: ${{ inputs.container_build }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}
          docker_image_name: ${{ inputs.docker_image_name }}
          tag: ${{ inputs.tag }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: [java-build, angular-build, get-context]
    if: always() && (needs.java-build.result == 'success' || needs.angular-build.result == 'success') && inputs.container_build == true && inputs.docker_image_name != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create multi-arch manifest
        shell: bash
        run: |
          # Get version information
          if [ -n "${{ inputs.tag }}" ]; then
            VERSION="${{ inputs.tag }}"
          else
            # Check if we're on a tag
            if [[ $GITHUB_REF == refs/tags/* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}
            else
              # Use short commit SHA
              VERSION=$(git rev-parse --short HEAD)
            fi

            # Add snapshot suffix if not on main branch
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            if [ "$BRANCH_NAME" != "main" ]; then
              VERSION="${VERSION}-snapshot"
            fi
          fi
          
          DOCKER_IMAGE_BASE="${{ inputs.docker_image_name }}:${VERSION}"
          
          echo "Creating multi-arch manifest for image: $DOCKER_IMAGE_BASE"
          echo "Version: $VERSION"
          
          # Function to check if an image exists
          check_image_exists() {
            local image=$1
            echo "Checking if image exists: $image"
            
            # Try to get the manifest
            if docker manifest inspect "$image" >/dev/null 2>&1; then
              echo "✅ Image $image exists"
              return 0
            else
              echo "❌ Image $image does not exist"
              return 1
            fi
          }
          
          # Build platform-specific image names
          PLATFORMS_TO_CHECK=(${{ join(fromJSON(inputs.build_platforms || '["amd64"]'), ' ') }})
          
          # Collect available platform images
          PLATFORM_IMAGES=""
          PLATFORMS_FOUND=""
          
          for platform in "${PLATFORMS_TO_CHECK[@]}"; do
            PLATFORM_TAG="${{ inputs.docker_image_name }}:${VERSION}-${platform}"
            
            if check_image_exists "$PLATFORM_TAG"; then
              PLATFORM_IMAGES="$PLATFORM_IMAGES $PLATFORM_TAG"
              PLATFORMS_FOUND="$PLATFORMS_FOUND $platform"
              echo "✅ Platform $platform image found: $PLATFORM_TAG"
            else
              echo "⚠️ Platform $platform image not found: $PLATFORM_TAG"
            fi
          done
          
          # Create manifest only if we have at least one platform image
          if [ -n "$PLATFORM_IMAGES" ]; then
            echo "Creating multi-arch manifest for platforms:$PLATFORMS_FOUND"
            echo "Platform images: $PLATFORM_IMAGES"
            
            # Remove any existing manifest first
            docker manifest rm "$DOCKER_IMAGE_BASE" 2>/dev/null || true
            
            # Create new manifest
            echo "Creating manifest: docker manifest create $DOCKER_IMAGE_BASE $PLATFORM_IMAGES"
            docker manifest create "$DOCKER_IMAGE_BASE" $PLATFORM_IMAGES
            
            echo "Pushing manifest: docker manifest push $DOCKER_IMAGE_BASE"
            docker manifest push "$DOCKER_IMAGE_BASE"
            
            echo "✅ Multi-arch manifest created successfully for $DOCKER_IMAGE_BASE"
            echo "🎯 Platforms included:$PLATFORMS_FOUND"
            
            # Create latest tag manifest if on main branch and not a snapshot
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            if [ "$BRANCH_NAME" = "main" ] && [[ ! "$VERSION" =~ "-snapshot" ]]; then
              LATEST_TAG="${{ inputs.docker_image_name }}:latest"
              echo "Creating latest tag manifest: $LATEST_TAG"
              
              docker manifest rm "$LATEST_TAG" 2>/dev/null || true
              docker manifest create "$LATEST_TAG" $PLATFORM_IMAGES
              docker manifest push "$LATEST_TAG"
              echo "✅ Latest tag manifest created successfully: $LATEST_TAG"
            fi
            
            echo ""
            echo "📋 Manifest Summary:"
            echo "  Main tag: $DOCKER_IMAGE_BASE"
            echo "  Platforms:$PLATFORMS_FOUND"
            echo "  Platform images: $PLATFORM_IMAGES"
            if [ "$BRANCH_NAME" = "main" ] && [[ ! "$VERSION" =~ "-snapshot" ]]; then
              echo "  Latest tag: ${{ inputs.docker_image_name }}:latest"
            fi
          else
            echo "⚠️ No platform images found, skipping manifest creation"
            echo "Expected platforms: ${PLATFORMS_TO_CHECK[*]}"
            echo "Expected base name: ${{ inputs.docker_image_name }}:${VERSION}-{platform}"
            exit 1
          fi
            
            # Create latest tag manifest if on main branch and not a snapshot
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            if [ "$BRANCH_NAME" = "main" ] && [[ ! "$VERSION" =~ "-snapshot" ]]; then
              LATEST_TAG="$(echo $DOCKER_IMAGE_BASE | cut -d: -f1):latest"
              echo "Creating latest tag manifest: $LATEST_TAG"
              
              docker manifest rm "$LATEST_TAG" 2>/dev/null || true
              docker manifest create "$LATEST_TAG" $PLATFORM_IMAGES
              docker manifest push "$LATEST_TAG"
              echo "✅ Latest tag manifest created successfully: $LATEST_TAG"
            fi
            
            echo ""
            echo "📋 Manifest Summary:"
            echo "  Project: $PROJECT_TYPE"
            echo "  Main tag: $DOCKER_IMAGE_BASE"
            echo "  Platforms:$PLATFORMS_FOUND"
            echo "  Platform images: $PLATFORM_IMAGES"
            if [ "$BRANCH_NAME" = "main" ] && [[ ! "$VERSION" =~ "-snapshot" ]]; then
              echo "  Latest tag: $LATEST_TAG"
            fi
          else
            echo "⚠️ No platform images found, skipping manifest creation"
            echo "Expected AMD64: $AMD64_TAG"
            echo "Expected ARM64: $ARM64_TAG"
            exit 1
          fi
          
  lint:
    runs-on: ubuntu-latest
    needs: [get-context, java-build, angular-build, create-manifest]
    if: always() && (needs.java-build.result == 'success' || needs.angular-build.result == 'success' || needs.java-build.result == 'skipped' || needs.angular-build.result == 'skipped')
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Linters
        uses: filhype-organization/universal-devops-action/.github/actions/lint@multi-build
        with:
          sql_lint_path: ${{ inputs.sql_lint_path }}
          sql_lint_config: ${{ inputs.sql_lint_config }}
          github_token: ${{ secrets.GH_TOKEN }}
          
  security:
    runs-on: ubuntu-latest
    needs: [get-context, java-build, angular-build, create-manifest]
    if: always() && (needs.java-build.result == 'success' || needs.angular-build.result == 'success' || needs.java-build.result == 'skipped' || needs.angular-build.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run TruffleHog Secret Scanning
        uses: filhype-organization/universal-devops-action/.github/actions/security/trufflehog@multi-build
        with:
          trufflehog_args: ${{ inputs.trufflehog_args }}
          
      - name: Run Trivy Vulnerability Scanning
        uses: filhype-organization/universal-devops-action/.github/actions/security/trivy@multi-build
        with:
          severity: 'CRITICAL,HIGH'
          upload_sarif: 'true'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Security Scan Summary
        shell: bash
        run: |
          echo "🛡️ Security scanning completed!"
          echo "✅ TruffleHog secret detection: Done"
          echo "✅ Trivy vulnerability analysis: Done"
          echo ""          echo "📊 Check the following for results:"
          echo "  - GitHub Security tab for Trivy SARIF results"
          echo "  - Job logs for TruffleHog secret detection"
          echo "  - Any failed steps indicate security issues to address"
  mkdocs-build:
    runs-on: ubuntu-latest
    needs: [get-context]
    if: needs.get-context.outputs.mkdocs == 'true' && inputs.enable_mkdocs_build == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Deploy MkDocs
        uses: filhype-organization/universal-devops-action/.github/actions/mkdocs-build@multi-build
        with:
          python_version: ${{ inputs.python_version }}
          mkdocs_requirements: ${{ inputs.mkdocs_requirements }}
          deploy: 'true'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: MkDocs Build Summary
        shell: bash
        run: |
          echo "📚 MkDocs documentation build completed!"
          echo "🚀 Documentation deployed to GitHub Pages"
          echo ""
          echo "📖 Your documentation is available at:"
          echo "  https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

  analysis:
    runs-on: ubuntu-latest
    needs: [get-context]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Renovate Configuration
        uses: filhype-organization/universal-devops-action/.github/actions/analysis/renovate@multi-build
        with:
          renovate_schedule: 'before 6am on monday'
          auto_merge_patch: 'true'
          auto_merge_dev_deps: 'true'



