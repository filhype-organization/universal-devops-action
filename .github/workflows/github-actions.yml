name: Reusable workflow

on:
  workflow_call:
    inputs:
      build_options:
        description: 'Additional options build commands'
        required: false
        type: string
        default: ''
      test_options:
        description: 'Additional options test commands'
        required: false
        type: string
        default: ''
      java_version:
        description: 'Java version'
        required: false
        type: string
        default: '21'
      node_version:
        description: 'Node.js version'
        required: false
        type: string
        default: '22'
      build_type:
        description: 'Build type for Java projects (legacy or native)'
        required: false
        type: string
        default: 'legacy'
      build_platform:
        description: 'Target platform for container builds (arm64 or x86)'
        required: false
        type: string
        default: 'x86'
      container_build:
        description: 'Whether to build and push container image for Angular'
        required: false
        type: boolean
        default: false
      sql_lint_path:
        description: 'Path to SQL files for linting'
        required: false
        type: string
        default: 'models'
      sql_lint_config:
        description: 'Path to SQLFluff config file'
        required: false
        type: string
        default: '.sqlfluff'
      trufflehog_args:
        description: 'Additional arguments for TruffleHog'
        required: false
        type: string
        default: '--results=verified,unknown'
      docker_image_name:
        description: 'Docker image name (required for container builds)'
        required: false
        type: string
    secrets:
      GH_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      DOCKER_USERNAME:
        required: false
      DOCKER_TOKEN:
        required: false

jobs:
  get-context:
    runs-on: ubuntu-latest    
    outputs:
      outputs: ${{ steps.project-type.outputs.outputs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Context
        id: project-type
        uses: filhype-organization/universal-devops-action/.github/actions/get-context@test

  
  test:
    runs-on: ubuntu-latest
    needs: [get-context]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: echo context
        run: |
          CONTEXT='${{ needs.get-context.outputs.outputs }}'
          echo "Context: $CONTEXT"

      - name: Run Java Tests
        if: fromJSON(needs.get-context.outputs.outputs).java
        uses: filhype-organization/universal-devops-action/.github/actions/test/java-test@test
        with:
          test_options: ${{ inputs.test_options }}
          java_version: ${{ inputs.java_version }}
          project_type: ${{ (fromJSON(needs.get-context.outputs.outputs).pom && 'maven') || 'gradle' }}

      - name: Run Angular Tests
        if: fromJSON(needs.get-context.outputs.outputs).angular
        uses: filhype-organization/universal-devops-action/.github/actions/test/angular-test@test
        with:
          build_options: ${{ inputs.build_options }}
          node_version: ${{ inputs.node_version }}
  java-build:
    runs-on: ubuntu-latest
    needs: [test, get-context]
    if: fromJSON(needs.get-context.outputs.outputs).java == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Java Project
        uses: filhype-organization/universal-devops-action/.github/actions/build/java-build@test
        with:
          java_version: ${{ inputs.java_version }}
          build_options: ${{ inputs.build_options }}
          build_type: ${{ inputs.build_type }}
          build_platform: ${{ inputs.build_platform }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}
          docker_image_name: ${{ inputs.docker_image_name }}
          is_quarkus: ${{ fromJSON(needs.get-context.outputs.outputs).quarkus }}
  angular-build:
    runs-on: ubuntu-latest
    needs: [test, get-context]
    if: fromJSON(needs.get-context.outputs.outputs).angular == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Angular Project
        uses: filhype-organization/universal-devops-action/.github/actions/build/angular-build@test
        with:
          node_version: ${{ inputs.node_version }}
          build_options: ${{ inputs.build_options }}
          build_platform: ${{ inputs.build_platform }}
          container_build: ${{ inputs.container_build }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}
          docker_image_name: ${{ inputs.docker_image_name }}

  lint:
    runs-on: ubuntu-latest
    needs: [java-build, angular-build]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Linters
        uses: filhype-organization/universal-devops-action/.github/actions/lint@test
        with:
          sql_lint_path: ${{ inputs.sql_lint_path }}
          sql_lint_config: ${{ inputs.sql_lint_config }}
          github_token: ${{ secrets.GH_TOKEN }}

  security:
    runs-on: ubuntu-latest
    needs: [java-build, angular-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Security Checks
        uses: filhype-organization/universal-devops-action/.github/actions/security@test
        with:
          trufflehog_args: ${{ inputs.trufflehog_args }}



