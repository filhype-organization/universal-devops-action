#!/bin/bash

# Script de test pour valider les builds multi-architecture
# Usage: ./test-multi-arch.sh

set -e

echo "üîß Test des builds multi-architecture"
echo "=================================="

# Test 1: Validation du format JSON pour build_platforms
test_json_parsing() {
    echo "üìã Test 1: Validation du parsing JSON"
    
    # Test avec un seul platform
    SINGLE='["amd64"]'
    RESULT=$(echo $SINGLE | jq -r '.[]')
    if [ "$RESULT" = "amd64" ]; then
        echo "‚úÖ Single platform parsing: OK"
    else
        echo "‚ùå Single platform parsing: FAILED"
        exit 1
    fi
    
    # Test avec multiple platforms
    MULTI='["amd64", "arm64"]'
    RESULT=$(echo $MULTI | jq -r '.[]' | wc -l)
    if [ "$RESULT" -eq 2 ]; then
        echo "‚úÖ Multi platform parsing: OK"
    else
        echo "‚ùå Multi platform parsing: FAILED"
        exit 1
    fi
}

# Test 2: Validation de la compatibilit√© build_platform
test_backward_compatibility() {
    echo "üìã Test 2: Compatibilit√© ascendante"
    
    # Simuler la conversion build_platform -> build_platforms
    OLD_PARAM="amd64"
    NEW_FORMAT='["'$OLD_PARAM'"]'
    
    PARSED=$(echo $NEW_FORMAT | jq -r '.[]')
    if [ "$PARSED" = "$OLD_PARAM" ]; then
        echo "‚úÖ Backward compatibility: OK"
    else
        echo "‚ùå Backward compatibility: FAILED"
        exit 1
    fi
}

# Test 3: Validation de la logique de tags Docker
test_docker_tagging() {
    echo "üìã Test 3: Logique de tags Docker"
    
    VERSION="1.0.0"
    PLATFORM="amd64"
    IMAGE_NAME="myorg/myapp"
    
    # Tag attendu pour platform-specific
    EXPECTED_TAG="$IMAGE_NAME:$VERSION-$PLATFORM"
    echo "‚úÖ Platform tag format: $EXPECTED_TAG"
    
    # Tag attendu pour manifest
    MANIFEST_TAG="$IMAGE_NAME:$VERSION"
    echo "‚úÖ Manifest tag format: $MANIFEST_TAG"
}

# Test 4: Validation de la structure des jobs matrix
test_matrix_strategy() {
    echo "üìã Test 4: Strat√©gie de matrice"
    
    # Simulation de la matrix strategy GitHub Actions
    PLATFORMS='["amd64", "arm64"]'
    
    # Chaque platform devrait cr√©er un job s√©par√©
    for PLATFORM in $(echo $PLATFORMS | jq -r '.[]'); do
        echo "‚úÖ Job cr√©√© pour platform: $PLATFORM"
    done
}

# Ex√©cution des tests
main() {
    echo "üöÄ D√©marrage des tests..."
    echo ""
    
    test_json_parsing
    echo ""
    
    test_backward_compatibility
    echo ""
    
    test_docker_tagging
    echo ""
    
    test_matrix_strategy
    echo ""
    
    echo "üéâ Tous les tests sont pass√©s avec succ√®s !"
    echo ""
    echo "üí° Points cl√©s de l'impl√©mentation:"
    echo "   - Support JSON array pour build_platforms"
    echo "   - Compatibilit√© avec build_platform (legacy)"
    echo "   - Builds parall√®les via matrix strategy"
    echo "   - Tags Docker platform-specific"
    echo "   - Manifest multi-arch automatique"
}

# V√©rification des d√©pendances
if ! command -v jq &> /dev/null; then
    echo "‚ùå jq n'est pas install√©. Installation requise pour les tests."
    echo "   Ubuntu/Debian: sudo apt-get install jq"
    echo "   macOS: brew install jq"
    exit 1
fi

main
